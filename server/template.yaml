AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  FlashGang infrastructure as code template
Parameters:
  DomainNameString:
    Description: The domain name
    Type: String
    Default: flashgang.io
  ApiVersion:
    Type: String
    Default: 'v1'
  DynamoDbEndpoint:
    Type: String
    Default: 'http://localhost:8000'
  RsvpUrl:
    Type: String
    Default: 'http://localhost:3000/rsvp'
  PasswordResetUrl:
    Type: String
    Default: 'http://localhost:3000'

Globals:
  Function:
    Timeout: 18
    Runtime: nodejs8.10
    Handler: index.handler
    Layers:
      - !Ref CommonLayer
    Environment:  
      Variables:
        USER_TABLE_NAME:
          !Sub ${AWS::StackName}-user-table
        FLASHDECK_TABLE_NAME:
          !Sub ${AWS::StackName}-flashdeck-table
        FLASHDECK_USER_TABLE_NAME:
          !Sub ${AWS::StackName}-flashdeck-user-table
        FLASHGANG_TABLE_NAME:
          !Sub ${AWS::StackName}-flashgang-table
        FLASHGANG_MEMBER_TABLE_NAME:
          !Sub ${AWS::StackName}-flashgang-member-table
        FLASHGANG_DECK_TABLE_NAME:
          !Sub ${AWS::StackName}-flashgang-deck-table
        DYNAMODB_ENDPOINT: !Ref DynamoDbEndpoint
        REGION: "eu-west-1"
        SIGNING_SECRET: "x!A%D*G-KaPdSgVkYp3s6v9y/B?E(H+MbQeThWmZq4t7w!z%C&F)J@NcRfUjXn2r"
        SMTP_USER_NAME: 'AKIATBSOR2QNIX5M4BMD'
        SMTP_PASSWORD: 'BOkI1ZXCWOex5w7tDRtRLl3qA46N/QmJ8Ncu4sCWxMhl'
        MEMBERSHIP_SENDMAIL_ADDRESS: 'membership@flashgang.io'
        SMTP_SERVER: 'email-smtp.us-east-1.amazonaws.com'
        RSVP_URL: !Ref RsvpUrl
        PASSWORD_RESET: !Ref PasswordResetUrl
Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: FlashGangGateway
      StageName: prod
      Cors: 
        AllowOrigin: "'*'"
        AllowMethods: "'OPTIONS,HEAD,GET,PUT,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
# lambdas
  SynchroniseLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: synchroniselambda/
      Runtime: nodejs8.10
      Role: 
        !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiEventSource:
          Type: Api
          Properties:
            Path: /synchronise
            Method: any
            RestApiId: !Ref ApiGateway
        
  AccountLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: accountlambda/
      Runtime: nodejs8.10
      Role: 
        !GetAtt LambdaExecutionRole.Arn
      Events:
        AccountEventSource:
          Type: Api
          Properties:
            Path: /account
            Method: any
            RestApiId: !Ref ApiGateway
        LoginEventSource:
          Type: Api
          Properties:
            Path: /login
            Method: any
            RestApiId: !Ref ApiGateway
        ResetEventSource:
          Type: Api
          Properties:
            Path: /resetpw
            Method: any
            RestApiId: !Ref ApiGateway
        SetEventSource:
          Type: Api
          Properties:
            Path: /setpw
            Method: any
            RestApiId: !Ref ApiGateway

  RsvpLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rsvplambda/
      Runtime: nodejs8.10
      Role: 
        !GetAtt LambdaExecutionRole.Arn
      Events:
        RsvpEventSource:
          Type: Api
          Properties:
            Path: /rsvp
            Method: any
            RestApiId: !Ref ApiGateway

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Join ['-',  [ !Ref 'AWS::StackName', 'CommonLayer' ],]
      Description: A few shareable code snippets that should work this time
      ContentUri: commonlayer
      CompatibleRuntimes:
        - nodejs8.10
      LicenseInfo: 'MIT'
      RetentionPolicy: Delete
# Database stuff
  FlashDeckTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-flashdeck-table
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      BillingMode: PROVISIONED
  FlashDeckUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-flashdeck-user-table
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: flashDeckId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: flashDeckId
          AttributeType: S
        - AttributeName: lastModified
          AttributeType: N
      GlobalSecondaryIndexes:
        - IndexName: last_modified_index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: lastModified
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: flashdeck_index
          KeySchema:
            - AttributeName: flashDeckId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      BillingMode: PROVISIONED
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
  FlashGangTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-flashgang-table
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      BillingMode: PROVISIONED
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
  FlashGangMemberTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-flashgang-member-table
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: flashGangId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: flashGangId
          AttributeType: S
        - AttributeName: lastModified
          AttributeType: N
      GlobalSecondaryIndexes:
        - IndexName: last_modified_index
          KeySchema:
            - AttributeName: id
              KeyType: HASH
            - AttributeName: lastModified
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: gang_index
          KeySchema:
            - AttributeName: flashGangId
              KeyType: HASH
            - AttributeName: lastModified
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      BillingMode: PROVISIONED
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-user-table
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      BillingMode: PROVISIONED
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
  FlashGangDeckTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-flashgang-deck-table
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: flashGangId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: flashGangId
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: gang_index
          KeySchema:
            - AttributeName: flashGangId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: deck_index
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      BillingMode: PROVISIONED
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
# infrastructure stuff
  ApiDomainName:
    Type: 'AWS::ApiGateway::DomainName'
    DependsOn: ApiGateway
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref FlashCertificate
      DomainName: api.flashgang.io

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
    DependsOn: [ApiDomainName]
  ApiBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    DependsOn: ApiGatewayDeployment
    Properties:
      RestApiId: !Ref ApiGateway
      DomainName: !Ref ApiDomainName
      BasePath: !Ref ApiVersion
      Stage: prod
  FlashCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: flashgang.io
      SubjectAlternativeNames:
      - flashgang.io
      - '*.flashgang.io'
      ValidationMethod: DNS
      DomainValidationOptions:
      - DomainName: '*.flashgang.io'
        ValidationDomain: flashgang.io
  ApiRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: flashgang.io.
      RecordSets:
        - Name: api.flashgang.io
          Type: A
          AliasTarget:
            EvaluateTargetHealth: false
            HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId
            DNSName: !GetAtt ApiDomainName.RegionalDomainName
# roles & permissions stuff
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Join [
          '-',
          [
            !Ref 'AWS::StackName',
            'LambdaExecutionRole'
          ],
        ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Join:
              - '-'
              - - !Ref AWS::StackName
                - WriteLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*'
        - PolicyName:
            Fn::Join:
              - '-'
              - - !Ref AWS::StackName
                - InvokeTokenLambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
        - PolicyName:
            Fn::Join:
              - '-'
              - - !Ref AWS::StackName
                - Iam
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'iam:GetRolePolicy'
                Resource: '*'
        - PolicyName:
            Fn::Join:
              - '-'
              - - !Ref AWS::StackName
                - database
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:*'
                Resource: '*'

# bucket stuff
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: prod.flashgang.bucket
      WebsiteConfiguration:
        ErrorDocument: '404.htm'
        IndexDocument: 'index.html'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            MaxAge: '300'
            AllowedMethods:
              - POST
            AllowedOrigins:
              - '*'
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - S3Bucket
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Sid: 'PublicReadForS3Website'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Effect: 'Allow'
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: 'S3Bucket'
                  - '/*'
            Principal: '*'
 
  WebsiteDNSName:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - WebsiteCloudfront
    Properties:
      HostedZoneName: flashgang.io.
      Name: !Ref DomainNameString
      Type: A
      AliasTarget:
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt WebsiteCloudfront.DomainName
  WebsiteCloudfront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - S3Bucket
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to S3 bucket
        Origins:
          - Id: S3Origin
            OriginPath: /flashgang
            DomainName:
              !Select [2, !Split ['/', !GetAtt S3Bucket.WebsiteURL]]
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: ''
        Aliases:
          - www.flashgang.io
          - flashgang.io
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
          ViewerProtocolPolicy: allow-all
          MinTTL: '0'
          MaxTTL: '0'
          DefaultTTL: '0'
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref FlashCertificate
          SslSupportMethod: sni-only
