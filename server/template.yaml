AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Test template
Parameters:
  AParameter: "hello world"

Globals:
  Function:
    Timeout: 18
    Runtime: nodejs8.10
    Handler: index.handler
    Layers:
      - !Ref CommonLayer
    Environment:  
      Variables:
        USER_TABLE_NAME:
          !Sub ${AWS::StackName}-user-table
        FLASHDECK_TABLE_NAME:
          !Sub ${AWS::StackName}-flashdeck-table
        FLASHDECK_USER_TABLE_NAME:
          !Sub ${AWS::StackName}-flashdeck-user-table
        FLASHGANG_TABLE_NAME:
          !Sub ${AWS::StackName}-flashgang-table
        FLASHGANG_MEMBER_TABLE_NAME:
          !Sub ${AWS::StackName}-flashgang-member-table
        DYNAMODB_ENDPOINT: "http://localhost:8000"
        REGION: "eu-west-1"
        SIGNING_SECRET: "x!A%D*G-KaPdSgVkYp3s6v9y/B?E(H+MbQeThWmZq4t7w!z%C&F)J@NcRfUjXn2r"
        SMTP_USER_NAME: 'AKIATBSOR2QNIX5M4BMD'
        SMTP_PASSWORD: 'BOkI1ZXCWOex5w7tDRtRLl3qA46N/QmJ8Ncu4sCWxMhl'
        MEMBERSHIP_SENDMAIL_ADDRESS: 'membership@flashgang.io'
        SMTP_SERVER: 'email-smtp.us-east-1.amazonaws.com'
        RSVP_URL: 'http://localhost:3000/rsvp'
Resources:
  ApiGateway:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: gateway
      StageName: dev
  SynchroniseLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: synchroniselambda/
      Runtime: nodejs8.10
      Role: 
        !GetAtt LambdaExecutionRole.Arn
      RestApiId: 
        !Ref ApiGateway
      Events:
        ApiEventSource:
          Type: Api
          Properties:
            Path: /synchronise
            Method: any
        
  AccountLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: accountlambda/
      Runtime: nodejs8.10
      Role: 
        !GetAtt LambdaExecutionRole.Arn
      RestApiId: 
        !Ref ApiGateway
      Events:
        AccountEventSource:
          Type: Api
          Properties:
            Path: /account
            Method: any
        LoginEventSource:
          Type: Api
          Properties:
            Path: /login
            Method: any
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Join ['-',  [ !Ref 'AWS::StackName', 'CommonLayer' ],]
      Description: A few shareable code snippets that should work this time
      ContentUri: commonlayer
      CompatibleRuntimes:
        - nodejs8.10
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  FlashDeckTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-flashdeck-table
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
  FlashDeckUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-flashdeck-user-table
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: flashDeckId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: flashDeckId
          AttributeType: S
        - AttributeName: lastModified
          AttributeType: N
      GlobalSecondaryIndexes:
        - IndexName: last_modified_index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: lastModified
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
  FlashGangTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-flashgang-table
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
  FlashGangMemberTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-flashgang-member-table
      KeySchema:
        - AttributeName: memberId
          KeyType: HASH
        - AttributeName: flashGangId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: memberId
          AttributeType: S
        - AttributeName: flashGangId
          AttributeType: S
        - AttributeName: lastModified
          AttributeType: N
      GlobalSecondaryIndexes:
        - IndexName: last_modified_index
          KeySchema:
            - AttributeName: memberId
              KeyType: HASH
            - AttributeName: lastModified
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-user-table
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true